{"ast":null,"code":"import * as Highcharts from 'highcharts';\nimport { AsyncSubject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, InjectionToken, Injectable, Inject, NgModule } from '@angular/core';\nimport * as Highmaps from 'highcharts/highmaps';\nimport * as Highstock from 'highcharts/highstock';\nimport * as Highcharts$1 from 'highcharts/highcharts-gantt';\n\nclass Chart {\n  constructor(options = {\n    series: []\n  }) {\n    this.options = options;\n    this.refSubject = new AsyncSubject();\n    this.ref$ = this.refSubject.asObservable();\n  }\n  /**\n   * Add Point\n   * @param point         Highcharts.DataPoint, number touple or number\n   * @param serieIndex    Index position of series. This defaults to 0.\n   * @param redraw        Flag whether or not to redraw point. This defaults to true.\n   * @param shift         Shift point to the start of series. This defaults to false.\n   */\n\n\n  addPoint(point, serieIndex = 0, redraw = true, shift = false) {\n    this.ref$.subscribe(chart => {\n      if (chart.series.length > serieIndex) {\n        chart.series[serieIndex].addPoint(point, redraw, shift);\n      }\n    });\n  }\n  /**\n   * Add Series\n   * @param series        Series Configuration\n   * @param redraw        Flag whether or not to redraw series. This defaults to true.\n   * @param animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n   */\n\n\n  addSeries(series, redraw = true, animation) {\n    this.ref$.subscribe(chart => {\n      chart.addSeries(series, redraw, animation);\n    });\n  }\n  /**\n   * Remove Point\n   * @param pointIndex    Index of Point\n   * @param serieIndex    Specified Index of Series. Defaults to 0.\n   */\n\n\n  removePoint(pointIndex, serieIndex = 0) {\n    this.ref$.subscribe(chart => {\n      if (chart.series.length > serieIndex && chart.series[serieIndex].data.length > pointIndex) {\n        chart.series[serieIndex].removePoint(pointIndex, true);\n      }\n    });\n  }\n  /**\n   * Remove Series\n   * @param seriesIndex    Index position of series to remove.\n   */\n\n\n  removeSeries(seriesIndex) {\n    this.ref$.subscribe(chart => {\n      if (chart.series.length > seriesIndex) {\n        chart.series[seriesIndex].remove(true);\n      }\n    });\n  }\n\n  init(el) {\n    if (!this.ref) {\n      Highcharts.chart(el.nativeElement, this.options, chart => {\n        if (!this.ref) {\n          // TODO: workaround for doubled callbacks on exporting charts: issue #238\n          this.refSubject.next(chart);\n          this.ref = chart;\n          this.refSubject.complete();\n        }\n      });\n    }\n  }\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined; // new init subject\n\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n\n} // import * as Highcharts from 'highcharts';\n\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\n\n\nclass MapChart {\n  constructor(options = {\n    series: []\n  }) {\n    this.options = options;\n    this.refSubject = new AsyncSubject();\n    this.ref$ = this.refSubject.asObservable();\n  }\n\n  init(el) {\n    if (!this.ref) {\n      Highmaps.mapChart(el.nativeElement, this.options, chart => {\n        if (!this.ref) {\n          // TODO: workaround for doubled callbacks on exporting charts: issue #238\n          this.refSubject.next(chart);\n          this.ref = chart;\n          this.refSubject.complete();\n        }\n      });\n    }\n  }\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined; // new init subject\n\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n\n} //import * as Highcharts from 'highcharts';\n\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */\n\n\nclass StockChart {\n  constructor(options = {\n    series: []\n  }) {\n    this.options = options;\n    this.refSubject = new AsyncSubject();\n    this.ref$ = this.refSubject.asObservable();\n  }\n\n  init(el) {\n    if (!this.ref) {\n      Highstock.stockChart(el.nativeElement, this.options, chart => {\n        if (!this.ref) {\n          // TODO: workaround for doubled callbacks on exporting charts: issue #238\n          this.refSubject.next(chart);\n          this.ref = chart;\n          this.refSubject.complete();\n        }\n      });\n    }\n  }\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined; // new init subject\n\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\n\n\nclass HighchartsGantt {\n  constructor(options = {\n    series: []\n  }) {\n    this.options = options;\n    this.refSubject = new AsyncSubject();\n    this.ref$ = this.refSubject.asObservable();\n  }\n\n  init(el) {\n    if (!this.ref) {\n      Highcharts$1.ganttChart(el.nativeElement, this.options, chart => {\n        if (!this.ref) {\n          // TODO: workaround for doubled callbacks on exporting charts: issue #238\n          this.refSubject.next(chart);\n          this.ref = chart;\n          this.refSubject.complete();\n        }\n      });\n    }\n  }\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined; // new init subject\n\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\n\n\nlet ChartDirective = /*#__PURE__*/(() => {\n  class ChartDirective {\n    constructor(el) {\n      this.el = el;\n    }\n\n    ngOnChanges(changes) {\n      if (!changes.chart.isFirstChange()) {\n        this.destroy();\n        this.init();\n      }\n    }\n\n    ngOnInit() {\n      this.init();\n    }\n\n    ngOnDestroy() {\n      this.destroy();\n    }\n\n    init() {\n      if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart || this.chart instanceof HighchartsGantt) {\n        this.chart.init(this.el);\n      }\n    }\n\n    destroy() {\n      if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart || this.chart instanceof HighchartsGantt) {\n        this.chart.destroy();\n      }\n    }\n\n  }\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  ChartDirective.ɵfac = function ChartDirective_Factory(t) {\n    return new (t || ChartDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  ChartDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ChartDirective,\n    selectors: [[\"\", \"chart\", \"\"]],\n    inputs: {\n      chart: \"chart\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return ChartDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\n\n\nlet HIGHCHARTS_MODULES = new InjectionToken('HighchartsModules');\nlet ChartService = /*#__PURE__*/(() => {\n  class ChartService {\n    constructor(chartModules) {\n      this.chartModules = chartModules;\n    }\n\n    initModules() {\n      this.chartModules.forEach(chartModule => {\n        [Highcharts, Highstock, Highmaps, Highcharts$1].forEach(chartModule);\n      });\n    }\n\n  }\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  ChartService.ɵfac = function ChartService_Factory(t) {\n    return new (t || ChartService)(i0.ɵɵinject(HIGHCHARTS_MODULES));\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  ChartService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ChartService,\n    factory: ChartService.ɵfac\n  });\n  return ChartService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\n\n\nlet ChartModule = /*#__PURE__*/(() => {\n  class ChartModule {\n    constructor(cs) {\n      this.cs = cs;\n      this.cs.initModules();\n    }\n\n  }\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  ChartModule.ɵfac = function ChartModule_Factory(t) {\n    return new (t || ChartModule)(i0.ɵɵinject(ChartService));\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  ChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ChartModule\n  });\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n  ChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: HIGHCHARTS_MODULES,\n      useValue: []\n    }, ChartService]\n  });\n  return ChartModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of angular-highcharts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Chart, ChartDirective, ChartModule, HIGHCHARTS_MODULES, HighchartsGantt, MapChart, StockChart }; //# sourceMappingURL=angular-highcharts.mjs.map","map":null,"metadata":{},"sourceType":"module"}